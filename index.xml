<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Freakston</title>
    <link>freakston.github.io/</link>
    <description>Recent content on Freakston</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©Freakston Copyright notice</copyright>
    <lastBuildDate>Tue, 12 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="freakston.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A look at DOS Malware ABR-1171.COM</title>
      <link>freakston.github.io/posts/dos_malware/dos_malware/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>freakston.github.io/posts/dos_malware/dos_malware/</guid>
      <description>In this post we will be looking at how ABR-1171 works.
 Environment setup →  Grab the latest version of DOSBox and install it. Link Grab the version of Debug build of DOSBox and place it in the installation folder. Link  Upon opening the file in a disassembler we can see that the first instruction is a jump to the unpacking routine. The unpacking routine can be replicated fairly easily since it&amp;rsquo;s a simple XOR.</description>
    </item>
    
    <item>
      <title>Setup Kernel Debugging of ReactOS using PUTTY/ROSDBG</title>
      <link>freakston.github.io/posts/kd_react/kd_react/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>freakston.github.io/posts/kd_react/kd_react/</guid>
      <description>Setup Kernel Debugging for ReactOS - In this post I will be guiding you guys on how to set up a kernel debugger for ReactOS. ReactOS can be built using the MSVC or GCC. In this post we will be using a ReactOS built using MSVC.
For official reference you can refer the ReactOS wiki.
Tools needed  com0com Putty Virtual Box  Steps  Install com0com with the following components selected.</description>
    </item>
    
    <item>
      <title>Introduction to DLL</title>
      <link>freakston.github.io/posts/windll/windll/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>freakston.github.io/posts/windll/windll/</guid>
      <description>What is a DLL - A DLL stands for &amp;ldquo;Dynamic Link Library&amp;rdquo;.It acts as a shared library. The executables can use functions from the DLL libraries by importing/attaching the DLL. Dynamic Libraries are libraries that are loaded from another file (typically the DLL file). They are similar in structure to PE, the only difference they have is that they contain export tables. The list of functions that can be loaded is in the export table of the DLL.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>freakston.github.io/about/</link>
      <pubDate>Fri, 19 Apr 2019 21:37:58 +0530</pubDate>
      
      <guid>freakston.github.io/about/</guid>
      <description>This is some static page where you can write about yourself.</description>
    </item>
    
  </channel>
</rss>